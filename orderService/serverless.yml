# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: leela
# "service" is the name of this project. This will also be added to your AWS resource names.
service: orderService

provider:
  name: aws
  runtime: nodejs22.x
  region: ap-south-1
  environment:
    REGION: ap-south-1
    DYNAMODB_TABLE: Orders
    SQS_ORDER_QUEUE_URL: https://sqs.ap-south-1.amazonaws.com/117915829123/OrderQueue
  # httpApi:
  #   authorizers:
  #     myCognitoAuth:
  #       identitySource: $request.header.Authorization   #Extract JWT Token from Authorization Header
  #       # who issued the token - URL of cognito pool (Need to verify tokens)
  #       issuerUrl: https://cognito-idp.ap-south-1.amazonaws.com/ap-south-1_yFvZMbwFb
  #       # cognito App clientID
  #       audience:
  #         - ${ssm:/CLIENT_ID}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: !GetAtt OrdersTable.Arn
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
      Resource: !GetAtt OrderQueue.Arn
resources:
  Resources:
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Orders
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    OrderQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: OrderQueue

functions:
  placeOrder:
    handler: handlers/placeOrder.placeOrder
    events:
      - httpApi:
          path: /create-order
          method: post
          # authorizer:
          #   name: myCognitoAuth
  processOrder:
    handler: handlers/processOrder.processOrder
    events:
      - sqs:
          arn: !GetAtt OrderQueue.Arn
